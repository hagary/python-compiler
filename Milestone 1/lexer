import java.util.*;
import java.io.*;

/* semantic value of token returned by scanner */
class Token{
	String category;
	String attribute;
	public Token(String category, String attribute) {
		this.category = category;
		this.attribute = attribute;
	}
	public Token(String category) {
		this.category = category;
	}
	@Override
	public String toString() {
		if(attribute == null)
			return "<" + category + ">";
		return "<" + category + ", " + attribute + ">";
	}
}
public class lexer
{
	BufferedReader reader;
	Yylex yy;
	public lexer(String filein) throws FileNotFoundException 
	{
		reader = new BufferedReader(new FileReader(filein));
		yy = new Yylex (reader);
		
	}
	public Token getNextToken(String filein) throws IOException
	{
		
		
		return yy.next_token();
	}
	public static void main (String[] args) throws IOException
	{
		BufferedReader reader = new BufferedReader(new FileReader("ms1.py.py"));
		BufferedWriter writer = new BufferedWriter(new FileWriter("ms1Out.txt"));
		Yylex yy = new Yylex (reader);
		while(true)
		{
			Token x =yy.next_token();
			if(x != null)
				System.out.println(x.toString());
			if(x==null)
				break;
			writer.write(x.toString());	
			writer.write('\n');
		}
		reader.close();
		writer.close();
	}
}
%%
%function next_token
%type Token

%eofval{
  return null;
%eofval}

%{
	StringBuffer string = new StringBuffer();
	int indentCount = 0;
%}

KEYWORD=class|finally|return|None|continue|for|lambda|try|def|from|nonlocal|while|del|global|with|as|elif|if|yield|assert|else|import|pass|break|except|raise|exec
ALPHA=[A-Za-z_]
DIGIT=[0-9]
ALPHA_NUMERIC={ALPHA}|{DIGIT}
NUMBER={DIGIT}+("."{DIGIT}+)?
ASSIGN_OP="="|"+="|"-="|"*="|"/="|"**="|"//="|"%="|"&="|"|="|"^="|"<<="|">>="
ARTH_OP="**"|"*"|"+"|"-"|"//"|"/"|"%"
COMP_OP="=="|"<="|"<"|">="|">"|"<>"|"!="
BITWISE_OP="&"|"|"|"^"|"~"|">>"|"<<"
MEM_OP=in|(not\ in)
ID_OP=(is\ not)|is
LOGICAL_OP=and|or|not
BOOL_VAL=True|False
INDENT=^(\ \ \ \ )+ | ^(\t)+
WHITE_SPACE=([\ ])+
NOSLASHSTR=[^\n\r\"\\\']+
QUOTE = [\"\']
TRIPLE_COMMENT = \"\"\"[^(\"\"\")]*\"\"\"| \'\'\'[^(\'\'\')]*\'\'\'
ID={ALPHA}({ALPHA_NUMERIC})*
COMMENTS={TRIPLE_COMMENT}\n|#[^\n]* \n
NEWLINE=\n
%state STRING
%%

<YYINITIAL> {COMMENTS} { 

}
<YYINITIAL> {NEWLINE} { 
  return new Token("NEWLINE"); 
}
<YYINITIAL> {INDENT} {
	int currCount = yytext().length()/4;
	indentCount = currCount;
 	return new Token("INDENT", currCount+""); 
}

<YYINITIAL> {KEYWORD} { 
  return new Token("KW",yytext()); 
}

<YYINITIAL> {BOOL_VAL} { 
  return new Token("BOOL",yytext());
}

<YYINITIAL> {ARTH_OP} { 
  return new Token("ARTH_OP",yytext()); 
}

<YYINITIAL> {COMP_OP} { 
  return new Token("COMP_OP", yytext()); 
}

<YYINITIAL> {LOGICAL_OP} { 
  return new Token("LOGICAL_OP", yytext()); 
}

<YYINITIAL> {ASSIGN_OP} { 
  return new Token("ASSIGN_OP", yytext()); 
}

<YYINITIAL> {BITWISE_OP} { 
  return new Token("BITWISE_OP", yytext()); 
}

<YYINITIAL> {MEM_OP} { 
  return new Token("MEM_OP", yytext()); 
}

<YYINITIAL> {ID_OP} { 
  return new Token("ID_OP", yytext()); 
}

<YYINITIAL> {ID} { 
  return new Token("ID", yytext()); 
}

<YYINITIAL> {NUMBER} { 
  return new Token("NUM", yytext()); 
}

<YYINITIAL> "." { 
  return new Token("DOT"); 
}

<YYINITIAL> "{" { 
  return new Token("LC"); 
}

<YYINITIAL> "}" { 
  return new Token("RC"); 
}

<YYINITIAL> "(" { 
  return new Token("LB"); 
}

<YYINITIAL> ")" { 
  return new Token("RB"); 
}

<YYINITIAL> ";" { 
  return new Token("SMCOL"); 
}

<YYINITIAL> ":" { 
  return new Token("COL"); 
}

<YYINITIAL> "@" { 
  return new Token("@"); 
}

<YYINITIAL> "," { 
  return new Token("COMMA"); 
}
<YYINITIAL> "[" { 
  return new Token("LS"); 
}
<YYINITIAL> "]" { 
  return new Token("RS"); 
}


<YYINITIAL> {QUOTE} { 
  string.setLength(0); yybegin(STRING);
}
<YYINITIAL> {WHITE_SPACE} { }
<YYINITIAL> . { 
  return new Token("Undefined", yytext()); 
}

<STRING> {QUOTE} {
	yybegin(YYINITIAL); 
	return new Token("STR", string.toString());
}

<STRING> {NOSLASHSTR} {
	string.append(yytext());
}
<STRING> \\t {
	string.append('\t');
}
<STRING> \\n {
	string.append('\n');
}
<STRING> \\r {
	string.append('\r');
}
<STRING> \\\" {
	string.append('\"');
}

<STRING> \\\' {
	string.append('\'');
}
<STRING> \\ {
	string.append('\\');
}
