
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 25 17:54:08 EET 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 25 17:54:08 EET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\004\004\000\002\004\002\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\003\000\002\007\005\000\002\007\004\000" +
    "\002\007\005\000\002\007\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\024\006\000\002\023\003" +
    "\000\002\023\006\000\002\025\005\000\002\025\003\000" +
    "\002\014\003\000\002\020\007\000\002\021\005\000\002" +
    "\021\004\000\002\022\005\000\002\022\003\000\002\017" +
    "\004\000\002\017\006\000\002\015\010\000\002\010\003" +
    "\000\002\010\003\000\002\011\004\000\002\012\006\000" +
    "\002\013\005\000\002\013\003\000\002\026\006\000\002" +
    "\026\004\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\024\002\ufffd\003\ufffd\006\ufffd\023\ufffd\037" +
    "\ufffd\042\ufffd\044\ufffd\045\ufffd\046\ufffd\001\002\000\024" +
    "\002\001\003\023\006\012\023\017\037\016\042\030\044" +
    "\010\045\007\046\022\001\002\000\004\002\006\001\002" +
    "\000\004\002\000\001\002\000\004\023\134\001\002\000" +
    "\004\023\134\001\002\000\026\002\ufffa\003\ufffa\006\ufffa" +
    "\012\ufffa\023\ufffa\037\ufffa\042\ufffa\044\ufffa\045\ufffa\046" +
    "\ufffa\001\002\000\004\007\133\001\002\000\026\002\uffd5" +
    "\003\uffd5\006\uffd5\012\uffd5\023\uffd5\037\uffd5\042\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\001\002\000\026\002\ufff9\003\ufff9" +
    "\006\ufff9\012\ufff9\023\ufff9\037\ufff9\042\ufff9\044\ufff9\045" +
    "\ufff9\046\ufff9\001\002\000\004\017\ufff5\001\002\000\006" +
    "\013\044\030\125\001\002\000\012\006\057\017\ufff6\025" +
    "\063\030\060\001\002\000\026\002\ufff7\003\ufff7\006\ufff7" +
    "\012\ufff7\023\ufff7\037\ufff7\042\ufff7\044\ufff7\045\ufff7\046" +
    "\ufff7\001\002\000\004\017\115\001\002\000\004\023\111" +
    "\001\002\000\030\002\uffee\003\uffee\006\uffee\012\uffee\017" +
    "\ufff4\023\uffee\037\uffee\042\uffee\044\uffee\045\uffee\046\uffee" +
    "\001\002\000\026\002\ufff8\003\ufff8\006\ufff8\012\ufff8\023" +
    "\ufff8\037\ufff8\042\ufff8\044\ufff8\045\ufff8\046\ufff8\001\002" +
    "\000\026\002\ufffb\003\ufffb\006\ufffb\012\ufffb\023\ufffb\037" +
    "\ufffb\042\ufffb\044\ufffb\045\ufffb\046\ufffb\001\002\000\026" +
    "\002\uffd4\003\uffd4\006\uffd4\012\uffd4\023\uffd4\037\uffd4\042" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\001\002\000\026\002\ufffc" +
    "\003\ufffc\006\ufffc\012\ufffc\023\ufffc\037\ufffc\042\ufffc\044" +
    "\ufffc\045\ufffc\046\ufffc\001\002\000\004\023\041\001\002" +
    "\000\026\002\ufffe\003\ufffe\006\ufffe\012\ufffe\023\ufffe\037" +
    "\ufffe\042\ufffe\044\ufffe\045\ufffe\046\ufffe\001\002\000\030" +
    "\002\uffe2\003\uffe2\006\uffe2\012\uffe2\023\uffe2\037\uffe2\040" +
    "\033\042\uffe2\044\uffe2\045\uffe2\046\uffe2\001\002\000\004" +
    "\033\034\001\002\000\004\011\036\001\002\000\026\002" +
    "\uffe1\003\uffe1\006\uffe1\012\uffe1\023\uffe1\037\uffe1\042\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\001\002\000\024\003\ufffd\006" +
    "\ufffd\012\ufffd\023\ufffd\037\ufffd\042\ufffd\044\ufffd\045\ufffd" +
    "\046\ufffd\001\002\000\024\003\023\006\012\012\040\023" +
    "\017\037\016\042\030\044\010\045\007\046\022\001\002" +
    "\000\030\002\uffff\003\uffff\006\uffff\012\uffff\023\uffff\037" +
    "\uffff\040\uffff\042\uffff\044\uffff\045\uffff\046\uffff\001\002" +
    "\000\004\036\042\001\002\000\016\005\046\006\012\013" +
    "\044\014\055\023\053\024\043\001\002\000\040\002\uffea" +
    "\003\uffea\006\uffea\007\uffea\012\uffea\014\uffea\023\uffea\031" +
    "\uffea\033\uffea\035\uffea\037\uffea\042\uffea\044\uffea\045\uffea" +
    "\046\uffea\001\002\000\034\002\uffde\003\uffde\006\uffde\012" +
    "\uffde\023\uffde\031\uffde\033\uffde\035\uffde\037\uffde\042\uffde" +
    "\044\uffde\045\uffde\046\uffde\001\002\000\004\033\107\001" +
    "\002\000\012\014\uffca\031\uffca\033\uffca\035\uffca\001\002" +
    "\000\010\031\uffe5\033\uffe5\035\uffe5\001\002\000\012\014" +
    "\102\031\uffe8\033\uffe8\035\uffe8\001\002\000\010\031\uffe6" +
    "\033\uffe6\035\uffe6\001\002\000\012\014\100\031\uffe7\033" +
    "\uffe7\035\uffe7\001\002\000\020\006\057\014\062\025\063" +
    "\030\060\031\uffe9\033\uffe9\035\uffe9\001\002\000\010\031" +
    "\uffe4\033\uffe4\035\uffe4\001\002\000\004\024\056\001\002" +
    "\000\040\002\uffec\003\uffec\006\uffec\007\uffec\012\uffec\014" +
    "\uffec\023\uffec\031\uffec\033\uffec\035\uffec\037\uffec\042\uffec" +
    "\044\uffec\045\uffec\046\uffec\001\002\000\010\014\055\023" +
    "\075\024\043\001\002\000\020\005\046\006\012\013\044" +
    "\014\055\023\053\024\043\031\070\001\002\000\036\002" +
    "\uffd8\003\uffd8\006\uffd8\012\uffd8\014\uffd8\023\uffd8\031\uffd8" +
    "\033\uffd8\035\uffd8\037\uffd8\042\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\001\002\000\004\024\066\001\002\000\004\023\064" +
    "\001\002\000\004\030\060\001\002\000\036\002\uffd7\003" +
    "\uffd7\006\uffd7\012\uffd7\014\uffd7\023\uffd7\031\uffd7\033\uffd7" +
    "\035\uffd7\037\uffd7\042\uffd7\044\uffd7\045\uffd7\046\uffd7\001" +
    "\002\000\040\002\uffeb\003\uffeb\006\uffeb\007\uffeb\012\uffeb" +
    "\014\uffeb\023\uffeb\031\uffeb\033\uffeb\035\uffeb\037\uffeb\042" +
    "\uffeb\044\uffeb\045\uffeb\046\uffeb\001\002\000\006\031\uffd9" +
    "\035\uffd9\001\002\000\036\002\uffdb\003\uffdb\006\uffdb\012" +
    "\uffdb\014\uffdb\023\uffdb\031\uffdb\033\uffdb\035\uffdb\037\uffdb" +
    "\042\uffdb\044\uffdb\045\uffdb\046\uffdb\001\002\000\006\031" +
    "\073\035\072\001\002\000\016\005\046\006\012\013\044" +
    "\014\055\023\053\024\043\001\002\000\036\002\uffdc\003" +
    "\uffdc\006\uffdc\012\uffdc\014\uffdc\023\uffdc\031\uffdc\033\uffdc" +
    "\035\uffdc\037\uffdc\042\uffdc\044\uffdc\045\uffdc\046\uffdc\001" +
    "\002\000\006\031\uffda\035\uffda\001\002\000\004\014\062" +
    "\001\002\000\006\007\077\014\100\001\002\000\040\002" +
    "\uffcf\003\uffcf\006\uffcf\012\uffcf\014\uffcf\017\uffcf\023\uffcf" +
    "\031\uffcf\033\uffcf\035\uffcf\037\uffcf\042\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\001\002\000\004\024\101\001\002\000\040" +
    "\002\uffed\003\uffed\006\uffed\007\uffed\012\uffed\014\uffed\023" +
    "\uffed\031\uffed\033\uffed\035\uffed\037\uffed\042\uffed\044\uffed" +
    "\045\uffed\046\uffed\001\002\000\010\005\106\006\012\023" +
    "\103\001\002\000\010\006\057\025\063\030\060\001\002" +
    "\000\012\014\uffcc\031\uffcc\033\uffcc\035\uffcc\001\002\000" +
    "\012\014\uffcb\031\uffcb\033\uffcb\035\uffcb\001\002\000\012" +
    "\014\uffcd\031\uffcd\033\uffcd\035\uffcd\001\002\000\004\011" +
    "\036\001\002\000\026\002\uffd6\003\uffd6\006\uffd6\012\uffd6" +
    "\023\uffd6\037\uffd6\042\uffd6\044\uffd6\045\uffd6\046\uffd6\001" +
    "\002\000\004\030\060\001\002\000\004\033\113\001\002" +
    "\000\004\011\036\001\002\000\026\002\uffdd\003\uffdd\006" +
    "\uffdd\012\uffdd\023\uffdd\037\uffdd\042\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\001\002\000\016\005\116\006\012\013\044\014" +
    "\055\023\122\024\043\001\002\000\026\002\ufff1\003\ufff1" +
    "\006\ufff1\012\ufff1\023\ufff1\037\ufff1\042\ufff1\044\ufff1\045" +
    "\ufff1\046\ufff1\001\002\000\026\002\ufff2\003\ufff2\006\ufff2" +
    "\012\ufff2\023\ufff2\037\ufff2\042\ufff2\044\ufff2\045\ufff2\046" +
    "\ufff2\001\002\000\026\002\ufff0\003\ufff0\006\ufff0\012\ufff0" +
    "\023\ufff0\037\ufff0\042\ufff0\044\ufff0\045\ufff0\046\ufff0\001" +
    "\002\000\030\002\ufff3\003\ufff3\006\ufff3\012\ufff3\014\100" +
    "\023\ufff3\037\ufff3\042\ufff3\044\ufff3\045\ufff3\046\ufff3\001" +
    "\002\000\012\006\057\014\062\025\063\030\060\001\002" +
    "\000\026\002\uffef\003\uffef\006\uffef\012\uffef\023\uffef\037" +
    "\uffef\042\uffef\044\uffef\045\uffef\046\uffef\001\002\000\004" +
    "\033\uffdf\001\002\000\004\013\044\001\002\000\004\033" +
    "\127\001\002\000\004\011\036\001\002\000\030\002\uffe3" +
    "\003\uffe3\006\uffe3\012\uffe3\023\uffe3\037\uffe3\040\uffe3\042" +
    "\uffe3\044\uffe3\045\uffe3\046\uffe3\001\002\000\004\031\132" +
    "\001\002\000\004\033\uffe0\001\002\000\040\002\uffce\003" +
    "\uffce\006\uffce\012\uffce\014\uffce\017\uffce\023\uffce\031\uffce" +
    "\033\uffce\035\uffce\037\uffce\042\uffce\044\uffce\045\uffce\046" +
    "\uffce\001\002\000\030\002\uffd0\003\uffd0\006\uffd0\012\uffd0" +
    "\023\uffd0\025\uffd0\037\uffd0\042\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\001\002\000\006\025\137\045\136\001\002\000\004" +
    "\023\134\001\002\000\004\023\140\001\002\000\030\002" +
    "\uffd1\003\uffd1\006\uffd1\012\uffd1\023\uffd1\025\uffd1\037\uffd1" +
    "\042\uffd1\044\uffd1\045\uffd1\046\uffd1\001\002\000\030\002" +
    "\uffd2\003\uffd2\006\uffd2\012\uffd2\023\uffd2\025\137\037\uffd2" +
    "\042\uffd2\044\uffd2\045\uffd2\046\uffd2\001\002\000\030\002" +
    "\uffd3\003\uffd3\006\uffd3\012\uffd3\023\uffd3\025\137\037\uffd3" +
    "\042\uffd3\044\uffd3\045\uffd3\046\uffd3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\006\002\004\004\003\001\001\000\032\005" +
    "\030\006\026\010\010\011\012\012\025\015\024\017\017" +
    "\020\013\023\023\024\031\026\014\027\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\141\001\001" +
    "\000\004\013\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\123\025\125\001\001\000\004\021\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\034\001\001\000\002\001\001\000\004\004\036\001\001" +
    "\000\032\005\030\006\026\010\010\011\012\012\025\015" +
    "\024\017\017\020\013\023\023\024\031\026\014\027\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\007" +
    "\051\014\046\016\044\017\053\026\050\030\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\075\001\001\000\020\007\051\014\046\016\066\017" +
    "\053\022\070\026\050\030\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\051\014" +
    "\046\016\073\017\053\026\050\030\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\104\026\103\001\001\000\004\021\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\107\001\001\000\002\001\001\000\004\021" +
    "\111\001\001\000\002\001\001\000\004\003\113\001\001" +
    "\000\002\001\001\000\012\007\120\014\116\017\122\026" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\130\001\001" +
    "\000\002\001\001\000\004\003\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // string ::= STR 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // string ::= string ARTH_OP func_call 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s && f && ((String) op).equals("+");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // string ::= string ARTH_OP list_item 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s && l && ((String) op).equals("+");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // string ::= string ARTH_OP STR 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = s && ((String) op).equals("+");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list_item ::= LS RS 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_item",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list_item ::= ID LS arith_expr RS 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_item",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dotted_name ::= ID 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dotted_name",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dotted_name ::= dotted_name DOT ID 
            {
              Boolean RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean n = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dotted_name",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // import_from ::= FROM dotted_name IMPORT dotted_name 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean n1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean n2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = n1 && n2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_from",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // import_name ::= IMPORT dotted_name 
            {
              Boolean RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean n = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_name",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // import_stmt ::= import_from 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // import_stmt ::= import_name 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // for_stmt ::= FOR ID IN val COL suite 
            {
              Boolean RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v && s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // func_call ::= ID DOT ID params 
            {
              Boolean RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean p1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // func_call ::= ID params 
            {
              Boolean RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean p = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // args ::= val 
            {
              Boolean RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // args ::= args COMMA val 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a && v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // params ::= LB RB 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // params ::= LB args RB 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // func_def ::= DEF ID params COL suite 
            {
              Boolean RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean p = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p && s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_def",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bool_expr ::= BOOL 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // test ::= bool_expr 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("test",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // test ::= LB bool_expr RB 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("test",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if_stmt ::= single_if_stmt ELSE COL suite 
            {
              Boolean RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean s1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s1 && s2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if_stmt ::= single_if_stmt 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // single_if_stmt ::= IF test COL suite 
            {
              Boolean RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t && s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_if_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // val ::= func_call 
            {
              Boolean RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // val ::= bool_expr 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // val ::= list_item 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // val ::= arith_expr 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // val ::= string 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // val ::= ID 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arith_expr ::= NUM 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arith_expr ::= ID ARTH_OP NUM 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arith_expr ::= ARTH_OP NUM 
            {
              Boolean RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = ((String) op).equals("+") || ((String) op).equals("-");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arith_expr ::= arith_expr ARTH_OP NUM 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assgn_stmt ::= error 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assgn_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // assgn_stmt ::= assgn_stmt_lhs ASSIGN_OP func_call 
            {
              Boolean RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assgn_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // assgn_stmt ::= assgn_stmt_lhs ASSIGN_OP list_item 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assgn_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // assgn_stmt ::= assgn_stmt_lhs ASSIGN_OP STR 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assgn_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // assgn_stmt ::= assgn_stmt_lhs ASSIGN_OP bool_expr 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assgn_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // assgn_stmt ::= assgn_stmt_lhs ASSIGN_OP arith_expr 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assgn_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // assgn_stmt_lhs ::= error 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assgn_stmt_lhs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // assgn_stmt_lhs ::= list_item 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assgn_stmt_lhs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // assgn_stmt_lhs ::= ID 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assgn_stmt_lhs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= func_call 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= if_stmt 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= func_def 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= import_stmt 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= for_stmt 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= assgn_stmt 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmts ::= 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmts ::= stmts stmt 
            {
              Boolean RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean s1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s1 && s2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // suite ::= INDENT stmts DEDENT 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean start_val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmts 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

